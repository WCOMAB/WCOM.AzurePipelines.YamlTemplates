jobs:
  - job: Build
    displayName: ${{ format('{0} Build', parameters.name) }}
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK (global.json)'
      inputs:
        packageType: sdk
        useGlobalJson: true

    - template: ../dotnetcommon/dotnet_auth.yml
      parameters:
        sources: ${{ parameters.sources }}

    - template: ../dotnetcommon/prebuild_common.yml
      parameters:
        preBuildScript: ${{ parameters.preBuildScript }}

    - script: dotnet build ${{ parameters.projectSrc }} /p:Version=$(Build.BuildNumber) ${{ join(' ', parameters.buildParameters) }}
      displayName: 'DotNet Build'

    - ${{ if ne(parameters.skipTests, true) }}:
      - script: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.13
        displayName: Installing Report Generator

      - script: dotnet test ${{ parameters.projectSrc }} --no-build --no-restore --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
        displayName: 'DotNet Test'

      - script: reportgenerator -reports:$(Agent.WorkFolder)/**/TestResults/**/coverage.cobertura.xml -targetdir:$(build.artifactstagingdirectory)/Report -reporttypes:"Cobertura"
        displayName: 'Merge code coverage reports'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage results'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(build.artifactstagingdirectory)/Report/Cobertura.xml'

      - task: PublishTestResults@2
        displayName: 'Publish VSTest logs'
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '$(Agent.WorkFolder)/**/TestResults/*.trx'

    - script: dotnet pack ${{ parameters.projectSrc }} --no-build --no-restore --output "$(build.artifactstagingdirectory)" /p:Version=$(Build.BuildNumber) ${{ join(' ', parameters.buildParameters) }}
      displayName: 'DotNet Package'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish $(Build.DefinitionName) Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/'
        archiveFilePatterns: '**/*.$(Build.BuildNumber).nupkg'
        artifactName: ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)

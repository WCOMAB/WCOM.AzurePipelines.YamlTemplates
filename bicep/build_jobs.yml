jobs:
  - job: Build
    displayName: ${{ format('{0} Build', parameters.name) }}
    steps:
    - template: ../dotnetcommon/prebuild_common.yml
      parameters:
        preBuildScript: ${{ parameters.preBuildScript }}

    - task: AzureCLI@2
      displayName: Bicep Build $(Build.Repository.Name) Arm Template
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          [ -d ${{ parameters.projectRoot }}/modules ] || mkdir -p ${{ parameters.projectRoot }}/modules
          [ -d ${{ parameters.projectRoot }}/internal ] || mkdir -p ${{ parameters.projectRoot }}/internal
          az bicep build --file ${{ parameters.projectRoot }}/main.bicep --outfile "$(build.artifactstagingdirectory)/azuredeploy.json"

    - ${{ if eq(parameters.validateBicep, true) }}:
      - task: AzureCLI@2
        displayName: Validate $(Build.Repository.Name) Arm Template
        inputs:
          azureSubscription: '${{ parameters.azureSubscription }}'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment group validate --name "az-validate-$(Build.BuildNumber)" --resource-group "${{ parameters.resourceGroup }}" --template-file "$(build.artifactstagingdirectory)/azuredeploy.json" --parameters env="${{ parameters.env }}" suffix="${{ parameters.suffix }}" system="${{ parameters.system }}" version="$(Build.BuildNumber)" ${{ parameters.extraParameters }}

    - publish: $(build.artifactstagingdirectory)/azuredeploy.json
      displayName: 'Publish ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName) Artifact'
      artifact: ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)

    - publish: ${{ parameters.projectRoot }}/modules
      condition: eq('${{ parameters.publish }}', true)
      displayName: Publish Bicep Modules Artifact
      artifact: ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)modules

    - publish: ${{ parameters.projectRoot }}/internal
      condition: eq('${{ parameters.publish }}', true)
      displayName: Publish Bicep Internal Modules Artifact
      artifact: ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)internal

    - task: Powershell@2
      displayName: Test building Bicep Modules
      inputs:
        pwsh: true
        targetType: inline
        script: |
          [string] $projectRoot = '${{ parameters.projectRoot }}'.Trim()
          [string] $Path = Join-Path $PWD $projectRoot 'modules'
          Write-Host "Ensuring bicep installed..."
          az bicep upgrade
          az bicep version
          [System.Collections.Concurrent.ConcurrentBag[int]] $ExitCodes = [System.Collections.Concurrent.ConcurrentBag[int]]::new()
          Push-Location
          Set-Location $Path
          Write-Host "Building modules..."
          Get-ChildItem -Path $Path -Recurse -Include *.bicep | `
              ForEach-Object -Parallel {
                  [string] $module = Resolve-Path -Relative $_.FullName
                  Write-Host "Building $module..."
                  az bicep build --file $_.FullName  | Write-Host
                  ($using:ExitCodes).Add($LASTEXITCODE)
                  Write-Host "Built $module."
              }
          Pop-Location
          Write-Host "Done building modules."
          EXIT ($ExitCodes | Measure-Object -Sum).Sum

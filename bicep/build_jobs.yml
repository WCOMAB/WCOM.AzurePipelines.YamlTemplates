jobs:
  - job: Build
    displayName: ${{ format('{0} Build', parameters.name) }}
    steps:
    - task: AzureCLI@2
      displayName: Bicep Build $(Build.Repository.Name) Arm Template
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript:  |
          [ -d ./modules ] || mkdir -p ./modules
          [ -d ./internal ] || mkdir -p ./internal
          az bicep build --file main.bicep --outfile "$(build.artifactstagingdirectory)/azuredeploy.json"

    - task: AzureCLI@2
      displayName: Validate $(Build.Repository.Name) Arm Template
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript:  |
          az deployment group validate --name "az-validate-$(Build.BuildNumber)" --resource-group "${{ parameters.resourceGroup }}" --template-file "$(build.artifactstagingdirectory)/azuredeploy.json" --parameters env="${{ parameters.env }}" suffix="${{ parameters.suffix }}" system="${{ parameters.system }}" version="$(Build.BuildNumber)" ${{ parameters.extraParameters }}

    - publish: $(build.artifactstagingdirectory)/azuredeploy.json
      displayName: 'Publish $(Build.Repository.Name) Artifact'
      artifact: $(Build.Repository.Name)

    - publish: ./modules
      condition: eq('${{ parameters.publish }}', true)
      displayName: Publish Bicep Modules Artifact
      artifact: modules

    - publish: ./internal
      condition: eq('${{ parameters.publish }}', true)
      displayName: Publish Bicep Internal Modules Artifact
      artifact: internal

    - task: AzureCLI@2
      displayName: Test building Bicep Modules
      inputs:
        azureSubscription: ${{ parameters.azureSubscription }}
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Ensuring bicep installed..."
          az bicep upgrade
          az bicep version
          [string] $Path = '$(Pipeline.Workspace)/modules'
          [System.Collections.Concurrent.ConcurrentBag[int]] $ExitCodes = [System.Collections.Concurrent.ConcurrentBag[int]]::new()
          Push-Location
          Set-Location $Path
          Write-Host "Building modules..."
          Get-ChildItem -Path $Path -Recurse -Include *.bicep | `
              ForEach-Object -Parallel {
                  [string] $module = Resolve-Path -Relative $_.FullName
                  Write-Host "Building $module..."
                  az bicep build --file $_.FullName  | Write-Host
                  ($using:ExitCodes).Add($LASTEXITCODE)
                  Write-Host "Built $module."
              }
          Pop-Location
          Write-Host "Done building modules."
          EXIT ($ExitCodes | Measure-Object -Sum).Sum

jobs:
  - job: Publish
    displayName: ${{ format('{0} Publish', parameters.name) }}
    steps:
    - download: current
      artifact: ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)modules
      displayName: Download modules

    - download: current
      artifact: ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)internal
      displayName: Download internal modules

    - task: AzureCLI@2
      displayName: Publish Bicep modules to registry
      inputs:
        powerShellErrorActionPreference: 'continue'
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript:  |
          Write-Host "Ensuring bicep installed..."
          az config set auto-upgrade.prompt=no
          az config set auto-upgrade.all=no
          az upgrade --yes
          az bicep uninstall
          az config set bicep.use_binary_from_path=false
          az bicep install
          az version
          az bicep version
          [string] $version = '$(Build.BuildNumber)'
          [string] $RegistryName = '${{ parameters.acr}}'
          [string] $Path = '$(Pipeline.Workspace)/modules'
          Move-Item -Path '$(Pipeline.Workspace)/${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)modules' -Destination '$(Pipeline.Workspace)/modules' -Force
          Move-Item -Path '$(Pipeline.Workspace)/${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)internal' -Destination '$(Pipeline.Workspace)/internal' -Force
          [System.Collections.Concurrent.ConcurrentBag[int]] $ExitCodes = [System.Collections.Concurrent.ConcurrentBag[int]]::new()
          Push-Location
          Set-Location $Path
          $modulesToPublish = @()

          Write-Host "Getting modules to publish..."
          Get-ChildItem -Path $Path -Recurse -Include *.bicep | ForEach-Object {
              [string] $moduleBaseName = [string]::Concat(
                                            [system.IO.Path]::GetDirectoryName((Resolve-Path -Relative $_.FullName)),
                                            '/',
                                            $_.BaseName
                                          ).Replace(
                                            '\',
                                            '/'
                                          ).TrimStart(
                                            '.',
                                            '/'
                                          ).ToLowerInvariant()
              $target = "br:$RegistryName.azurecr.io/bicep/modules/${moduleBaseName}:$version"
              $modulesToPublish += [PSCustomObject]@{
                  File = $_.FullName
                  Target = $target
                  BaseName = $moduleBaseName
              }
          }
          Write-Host "Found $($modulesToPublish.Count) modules to publish"
          
          Write-Host "Publishing modules..."
          
          # Publish first module single-threaded to validate configuration
          if ($modulesToPublish.Count -gt 0) {
              $firstModule = $modulesToPublish[0]
              Write-Host "Publishing first module $($firstModule.BaseName) to $($firstModule.Target) in single-threaded mode to validate configuration..."
              az bicep publish --verbose --file $firstModule.File --target $firstModule.Target | Write-Host
              $firstExitCode = $LASTEXITCODE
              $ExitCodes.Add($firstExitCode)
              
              if ($firstExitCode -eq 0) {
                  Write-Host "First module published successfully. Proceeding with parallel publishing for remaining modules..."
                  
                  # Process remaining modules in parallel
                  if ($modulesToPublish.Count -gt 1) {
                      $modulesToPublish[1..$($modulesToPublish.Count-1)] | ForEach-Object -Parallel {
                          Write-Host "Publishing $($_.BaseName) to $($_.Target)..."
                          az bicep publish --verbose --file $_.File --target $_.Target | Write-Host
                          ($using:ExitCodes).Add($LASTEXITCODE)
                          Write-Host "Published $($_.BaseName)."
                      }
                  }
              }
              else {
                  Write-Host "First module publishing failed with exit code $firstExitCode. Aborting parallel publishing."
              }
          }
          else {
              Write-Host "No modules found to publish."
          }
          
          Write-Host "Done publishing modules."
          
          Pop-Location
          EXIT ($ExitCodes | Measure-Object -Sum).Sum

    - task: AzureCLI@2
      displayName: Install and Run BRI Tool
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          if ((Get-Command -Name bri -ErrorAction Ignore| Measure-Object).Count -lt 1)
          {
            dotnet tool install --global BRI
          }
          bri inventory ${{ parameters.acr }}.azurecr.io " $(build.artifactstagingdirectory)"

    - task: ArchiveFiles@2
      displayName: Zip BRI generated files
      inputs:
        rootFolderOrFile: "$(build.artifactstagingdirectory)"
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: "$(build.artifactstagingdirectory)/${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)Docs-$(Build.BuildNumber).zip"
        replaceExistingArchive: true

    - publish: "$(build.artifactstagingdirectory)/${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)Docs-$(Build.BuildNumber).zip"
      displayName: 'Publish ${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)Docs Zip Artifact'
      artifact: "${{ parameters.artifactNamePrefix }}$(Build.DefinitionName)Docs"
